/*  Current goals of this program as specified by the document      |
    is as follows:                                                  |
    1. Encypt a message with a function using a key from a file     |
       which will also be written to a file.                        |
    2. Do the reverse of point 1.                                   |
    3. Encypt with a substaution chipher with a message and key     |
    4. do the reverse of 3.                                         |
    5. Decypt a message that is encypted with rotation cypher       |
       without the key. AKA Break the code.                         |
    6. Do the same with 5 but with a sub encyption.                */
/*  Things to know:                                                 |
                >Each task should be done by a FUNCTION             |
                >The user input will be taken from a file           |
                >The file will be formated as a single int          |
                 on line one for the option that will be done       |
                 the second line will contain the key given as      |
                 an int. The third line will be the message.        |
                                                                    |
                >What should be done with the white spaces?         |
                >What if the message includes numerals?             |
                >Should upper and lowercase be handled diffrently?  |
                >Do not encypt grammar, spaces or numbers.          |
                >All the message will be in ASCII uppercase.        |
                                                                    |
                >Key format will be from the set of [0,25]          |
                >The sub key will be a string of 26 letters         |
                >If the letter is a lower case then subtract 32     |
                                                                  */
#include <stdio.h>
FILE *fin;
FILE *fout;


int ecsh(int key);  //function proto to encypt messages
int cap(char r);    //function that capitlizes letters if they are lowercase.
int dcsh(int key);  //function proto to decypt messages
int wrapZ(char p);  //function that will take a charcter after the key has been subtracted and wrap it up back to z area
int wrapA(char p);  //function that will take a character after the key has been added and wrap it up back to A area
int ecsub(void);    //function that will encypt messages via substatuition

int main ()
{
    int sel, key, tmp;
    
    
    /* open file in */
   fin = fopen("in.txt", "r");
   fscanf(fin, "%d", &sel);
   fscanf(fin, "%d", &key);
     
   switch(sel)
   {
       case 1:
       tmp = ecsh(key);
       break;
       
       case 2:
       //this will be the decypt function
       tmp = dcsh(key);
       break;
       
       case 3:
       ecsub();
       break;
       
       case 4:
       //this will be the decypt with the sub function
       break;
       
       case 5:
       //this will be the attack funtion for the shift
       break;
       
       case 6:
       //this will be the attack function for the sub
       break;
   }

    return 0;
}
/* -------------------------------------------------------------- */
int ecsh(int key)
{
    char r, p, t;
    char array[140];
    int n, tmp;
    n = 0;
    p = 0;
    r = 1;
    fin = fopen("in.txt", "r");

    
    while( EOF != 0 )
    {
        if (n == 140)
        {
            fout = fopen("out.txt", "w");
            fwrite(array, sizeof(char), sizeof (array), fout);
            fclose(fout);
        
            return 0;
        }
        else
        {
            fscanf(fin, "%c", &r);
            if (r >= 65 && r <= 90)
            {
                char p = r + key;
                if (p >= 91)
                {
                    tmp = wrapA(p);
                    array[n++] = tmp;
                }
                else
                {
                    array[n++] = p;
                }

            }
            else
            {
                if (r >= 97 && r <= 122)
                {
                    t = cap(r);
                    char p = t + key;
                    if ( p >= 91)
                    {
                        tmp = wrapA(p);
                        array[n++] = tmp;
                    }
                    else
                    {
                        array[n++] = p;
                    }
                 }
                else
                {
                    array[n++] = p;
                }
            }
        }
    }
}
/* -------------------------------------------------------------- */
int cap(char r)
{
    char tmp0;
    tmp0 = r - 32;
    return tmp0;
    
}
/* -------------------------------------------------------------- */
int dcsh(int key)
{
    char r, p, t;
    char array[140];
    int n, tmp;
    n = 0;
    p = 0;
    r = 1;
    fin = fopen("in.txt", "r");

    
    while( EOF != 0 )
    {
        if (n == 140)
        {
            fout = fopen("out.txt", "w");
            fwrite(array, sizeof(char), sizeof (array), fout);
            fclose(fout);
        
            return 0;
        }
        else
        {
            fscanf(fin, "%c", &r);
            if (r >= 65 && r <= 90)
            {
                char p = r - key;
                if (p <= 64)
                {
                    tmp = wrapZ(p);
                    array[n++] = tmp;
                }
                else
                {
                    array[n++] = p;
                }        
            }
            else
            {
                if (r >= 97 && r <= 122)
                {
                    t = cap(r);
                    char p = t - key;
                    if ( p <= 64 )
                    {
                        tmp = wrapZ(p);
                        array[n++] = tmp;
                    }
                    else
                    {
                        array[n++] = p;
                    }
                }
                else
                {
                    array[n++] = p;
                }
            }
        }
    }
}
/* -------------------------------------------------------------- */
int wrapZ(char p) //function will wrap the keyed character from Z down to A
{
    int tmp, r;
    
    tmp = 90 - p;
    r = 40 + tmp;
    
    return (r);
}
/* -------------------------------------------------------------- */
int wrapA(char p) //function will wrap the keyed character from A up to Z
{
    int tmp, r;
    tmp = p - 90;
    r = 64 + tmp;
    
    return (r);
}
/* -------------------------------------------------------------- */
int ecsub(void)
{
/*      Fundamental Idea behind what I am going to do
    My understanding of 2d arrays is that they form a table like so:
    enc[2][26];
    enc:
        0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
      0 A B C D E F G H I J K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z
      1 tt
    So if this is true, I can fill enc[0][0,25] with A B C D E F G etc
    then fill enc[1][0,25] with the key that will be scanned in!
    
    So when I am encrypting a message I can scan for the character in [0][0,25]
    and match it with the corrosponding number to get the right character!
    
    Just searching it might be alot of code, which Idk if I can shorten.
*/
    char enc[2][26];    //table that will be searched.
  //  char out[240];      //array that will be printed to file.
  //  int x, y, tmp, n1, n2, c;
    int c, tmp;
    c = 0;
    char a, r;
    
    a = 65;
    
    fin = fopen("in.txt", "r");     //opening the input file to be read from.
    fout = fopen("out.txt", "w");   //opening the output file to write to.
    
    for(c = 0; c <= 26; c++)
    {
       tmp = a + c;
       enc[0][c] = tmp;
    }
    //    fwrite(enc, sizeof(char), 26, fout);
    
    while (1)   //creating a never ending while loop as feof does not work here
    {
        if ( feof(fin) ) //feof works here so it will lead to a break for now.
        {
            fwrite(enc, sizeof(char), sizeof(enc), fout);
            break;
        }
        else
        {
            for (c = 0; c <= 25; c++)
            {
                fscanf(fin, "%c", &r);
                if (r <= 64 && r >= 91)
                {
                    c = c - 1;
                }
                else
                {
                    enc[1][c] = r;
                }
            }
        }
    }
    
    return 0;
}
